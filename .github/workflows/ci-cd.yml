name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GAR_LOCATION: us-central1
  REPOSITORY: rag-ai-agent
  SERVICE_NAME: rag-backend
  STREAMLIT_SERVICE_NAME: rag-frontend

jobs:
  # Job 1: Lint and Test
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8

      - name: Lint with flake8
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: black --check app

      - name: Run tests
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=html
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 2: Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.streamlit
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Deploy to GCP Cloud Run (or Vertex AI)
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/backend:latest \
            --platform=managed \
            --region=${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=2 \
            --timeout=300 \
            --set-env-vars="QDRANT_URL=${{ secrets.QDRANT_URL }},INNGEST_EVENT_KEY=${{ secrets.INNGEST_EVENT_KEY }}" \
            --min-instances=0 \
            --max-instances=10

      - name: Deploy Frontend to Cloud Run
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          
          gcloud run deploy ${{ env.STREAMLIT_SERVICE_NAME }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:latest \
            --platform=managed \
            --region=${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --timeout=300 \
            --set-env-vars="BACKEND_URL=${BACKEND_URL},INNGEST_API_BASE=${{ secrets.INNGEST_API_BASE }}" \
            --min-instances=0 \
            --max-instances=5

      - name: Get service URLs
        id: urls
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          FRONTEND_URL=$(gcloud run services describe ${{ env.STREAMLIT_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with URLs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Complete!**\n\n` +
                    `üìä **Backend**: ${{ steps.urls.outputs.backend_url }}\n` +
                    `üåê **Frontend**: ${{ steps.urls.outputs.frontend_url }}`
            })

  # Job 4: Model Update (triggered manually or on schedule)
  update-models:
    name: Update ML Models
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Download and cache updated models
        run: |
          pip install sentence-transformers transformers torch
          python scripts/download_models.py

      - name: Upload models to GCS
        run: |
          gcloud storage cp -r models/ gs://${{ env.GCP_PROJECT_ID }}-models/

      - name: Trigger rebuild
        run: |
          gh workflow run ci-cd.yml --ref main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}